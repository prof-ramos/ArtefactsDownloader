{
  "manifest_version": 3,
  "name": "Claude Artifacts Downloader",
  "version": "1.0.0",
  "description": "Download all artifacts from Claude conversations with one click",
  "permissions": [
    "activeTab",
    "downloads"
  ],
  "host_permissions": [
    "https://claude.ai/*"
  ],
  "action": {
    "default_popup": "popup.html",
    "default_title": "Download Claude Artifacts"
  },
  "content_scripts": [
    {
      "matches": ["https://claude.ai/*"],
      "js": ["content.js"]
    }
  ],
  "web_accessible_resources": [
    {
      "resources": ["jszip.min.js"],
      "matches": ["https://claude.ai/*"]
    }
  ]
}

// popup.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            width: 300px;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        .logo {
            font-size: 24px;
            margin-bottom: 8px;
        }
        .title {
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }
        .subtitle {
            font-size: 12px;
            color: #666;
            margin-top: 4px;
        }
        .controls {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        .button {
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        .button-primary {
            background: #2563eb;
            color: white;
        }
        .button-primary:hover {
            background: #1d4ed8;
        }
        .button-secondary {
            background: #f3f4f6;
            color: #374151;
            border: 1px solid #d1d5db;
        }
        .button-secondary:hover {
            background: #e5e7eb;
        }
        .status {
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            text-align: center;
            margin-top: 12px;
        }
        .status-info {
            background: #dbeafe;
            color: #1e40af;
        }
        .status-success {
            background: #dcfce7;
            color: #166534;
        }
        .status-error {
            background: #fee2e2;
            color: #dc2626;
        }
        .options {
            margin: 16px 0;
            padding: 12px;
            background: #f9fafb;
            border-radius: 8px;
        }
        .option {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        .option:last-child {
            margin-bottom: 0;
        }
        .option input {
            margin-right: 8px;
        }
        .option label {
            font-size: 12px;
            color: #374151;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">üì¶</div>
        <div class="title">Claude Artifacts</div>
        <div class="subtitle">Download all artifacts from this conversation</div>
    </div>
    
    <div class="options">
        <div class="option">
            <input type="checkbox" id="includeConversation" checked>
            <label for="includeConversation">Include conversation text</label>
        </div>
        <div class="option">
            <input type="checkbox" id="zipFormat" checked>
            <label for="zipFormat">Download as ZIP file</label>
        </div>
        <div class="option">
            <input type="checkbox" id="addTimestamp">
            <label for="addTimestamp">Add timestamp to filename</label>
        </div>
    </div>
    
    <div class="controls">
        <button id="downloadAll" class="button button-primary">
            üì• Download All Artifacts
        </button>
        <button id="scanArtifacts" class="button button-secondary">
            üîç Scan for Artifacts
        </button>
    </div>
    
    <div id="status" class="status" style="display: none;"></div>
    
    <script src="popup.js"></script>
</body>
</html>

// popup.js
document.addEventListener('DOMContentLoaded', function() {
    const downloadButton = document.getElementById('downloadAll');
    const scanButton = document.getElementById('scanArtifacts');
    const statusDiv = document.getElementById('status');
    
    function showStatus(message, type = 'info') {
        statusDiv.textContent = message;
        statusDiv.className = `status status-${type}`;
        statusDiv.style.display = 'block';
        
        if (type === 'success' || type === 'error') {
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 3000);
        }
    }
    
    function getOptions() {
        return {
            includeConversation: document.getElementById('includeConversation').checked,
            zipFormat: document.getElementById('zipFormat').checked,
            addTimestamp: document.getElementById('addTimestamp').checked
        };
    }
    
    scanButton.addEventListener('click', async function() {
        showStatus('Scanning for artifacts...', 'info');
        
        try {
            const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
            
            if (!tab.url.includes('claude.ai')) {
                showStatus('Please navigate to claude.ai first', 'error');
                return;
            }
            
            const response = await chrome.tabs.sendMessage(tab.id, {
                action: 'scanArtifacts'
            });
            
            if (response.success) {
                showStatus(`Found ${response.count} artifacts`, 'success');
            } else {
                showStatus('No artifacts found', 'error');
            }
        } catch (error) {
            showStatus('Error scanning artifacts', 'error');
            console.error(error);
        }
    });
    
    downloadButton.addEventListener('click', async function() {
        showStatus('Starting download...', 'info');
        
        try {
            const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
            
            if (!tab.url.includes('claude.ai')) {
                showStatus('Please navigate to claude.ai first', 'error');
                return;
            }
            
            const options = getOptions();
            const response = await chrome.tabs.sendMessage(tab.id, {
                action: 'downloadArtifacts',
                options: options
            });
            
            if (response.success) {
                showStatus(`Downloaded ${response.count} artifacts`, 'success');
            } else {
                showStatus(response.error || 'Download failed', 'error');
            }
        } catch (error) {
            showStatus('Error downloading artifacts', 'error');
            console.error(error);
        }
    });
});

// content.js
(function() {
    'use strict';
    
    // Listen for messages from popup
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        if (request.action === 'scanArtifacts') {
            const artifacts = extractArtifacts();
            sendResponse({
                success: artifacts.length > 0,
                count: artifacts.length
            });
        } else if (request.action === 'downloadArtifacts') {
            downloadAllArtifacts(request.options)
                .then(count => {
                    sendResponse({
                        success: true,
                        count: count
                    });
                })
                .catch(error => {
                    sendResponse({
                        success: false,
                        error: error.message
                    });
                });
        }
        return true; // Keep message channel open for async response
    });

    // Shared functions from main script
    function getCodeExtension(language) {
        const extensions = {
            'javascript': '.js',
            'typescript': '.ts',
            'python': '.py',
            'java': '.java',
            'cpp': '.cpp',
            'c': '.c',
            'csharp': '.cs',
            'php': '.php',
            'ruby': '.rb',
            'go': '.go',
            'rust': '.rs',
            'bash': '.sh',
            'sql': '.sql',
            'yaml': '.yml',
            'json': '.json',
            'xml': '.xml',
            'css': '.css',
            'html': '.html',
            'dockerfile': '.dockerfile',
            'plaintext': '.txt'
        };
        return extensions[language?.toLowerCase()] || '.txt';
    }

    function sanitizeFilename(filename) {
        return filename
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '_')
            .replace(/_+/g, '_')
            .toLowerCase()
            .substring(0, 50);
    }

    function extractArtifacts() {
        const artifacts = [];
        const artifactElements = document.querySelectorAll('[data-testid="artifact"]');
        
        artifactElements.forEach((element, index) => {
            try {
                const titleElement = element.querySelector('[data-testid="artifact-title"]') || 
                                   element.querySelector('.artifact-title') ||
                                   element.querySelector('h3, h2, h1');
                const title = titleElement?.textContent?.trim() || `Artifact_${index + 1}`;
                
                const contentElement = element.querySelector('pre code') || 
                                     element.querySelector('pre') ||
                                     element.querySelector('.artifact-content') ||
                                     element.querySelector('iframe')?.contentDocument?.body;
                
                if (!contentElement) return;
                
                let content = '';
                let mimeType = 'text/plain';
                let language = '';
                
                if (contentElement.tagName === 'CODE') {
                    content = contentElement.textContent;
                    const classNames = contentElement.className;
                    const langMatch = classNames.match(/language-(\w+)/);
                    language = langMatch ? langMatch[1] : 'plaintext';
                    mimeType = 'application/vnd.ant.code';
                } else if (element.querySelector('svg')) {
                    const svgElement = element.querySelector('svg');
                    content = svgElement.outerHTML;
                    mimeType = 'image/svg+xml';
                } else if (element.querySelector('iframe')) {
                    const iframe = element.querySelector('iframe');
                    try {
                        content = iframe.contentDocument.documentElement.outerHTML;
                        mimeType = 'text/html';
                    } catch (e) {
                        console.warn('Cannot access iframe content due to CORS:', e);
                        content = '<!-- Content not accessible due to CORS restrictions -->';
                    }
                } else {
                    content = contentElement.textContent || contentElement.innerHTML;
                    mimeType = 'text/markdown';
                }
                
                if (content.trim()) {
                    artifacts.push({
                        title: sanitizeFilename(title),
                        content: content,
                        mimeType: mimeType,
                        language: language,
                        index: index + 1
                    });
                }
            } catch (error) {
                console.error(`Erro ao processar artefato ${index + 1}:`, error);
            }
        });
        
        return artifacts;
    }

    function extractConversationText() {
        const messages = document.querySelectorAll('[data-testid="conversation-turn"]');
        let conversationText = '# Conversa Claude\n\n';
        conversationText += `Extra√≠do em: ${new Date().toLocaleString()}\n\n`;
        
        messages.forEach((message, index) => {
            try {
                const isUser = message.querySelector('[data-testid="user-message"]');
                const isAssistant = message.querySelector('[data-testid="assistant-message"]');
                
                const sender = isUser ? 'Usu√°rio' : isAssistant ? 'Claude' : 'Sistema';
                const content = message.textContent.trim();
                
                if (content) {
                    conversationText += `## ${sender} (${index + 1})\n\n${content}\n\n---\n\n`;
                }
            } catch (error) {
                console.warn(`Erro ao extrair mensagem ${index + 1}:`, error);
            }
        });
        
        return conversationText;
    }

    function getFileExtension(artifact) {
        const { mimeType, language } = artifact;
        
        if (mimeType === 'application/vnd.ant.code') {
            return getCodeExtension(language);
        }
        
        const formats = {
            'text/markdown': '.md',
            'text/html': '.html',
            'image/svg+xml': '.svg',
            'application/json': '.json'
        };
        
        return formats[mimeType] || '.txt';
    }

    function loadJSZip() {
        return new Promise((resolve, reject) => {
            if (typeof JSZip !== 'undefined') {
                resolve();
                return;
            }
            
            const script = document.createElement('script');
            script.src = chrome.runtime.getURL('jszip.min.js');
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    function downloadBlob(blob, filename) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    async function downloadAsZip(artifacts, options) {
        await loadJSZip();
        
        const zip = new JSZip();
        
        artifacts.forEach(artifact => {
            const filename = `${artifact.title}${getFileExtension(artifact)}`;
            zip.file(filename, artifact.content);
        });
        
        if (options.includeConversation) {
            const conversationText = extractConversationText();
            if (conversationText) {
                zip.file('conversation.md', conversationText);
            }
        }
        
        const metadata = {
            extractedAt: new Date().toISOString(),
            totalArtifacts: artifacts.length,
            artifacts: artifacts.map(a => ({
                title: a.title,
                type: a.mimeType,
                language: a.language
            }))
        };
        zip.file('metadata.json', JSON.stringify(metadata, null, 2));
        
        let filename = 'claude-artifacts.zip';
        if (options.addTimestamp) {
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            filename = `claude-artifacts-${timestamp}.zip`;
        }
        
        const content = await zip.generateAsync({type: 'blob'});
        downloadBlob(content, filename);
        
        return artifacts.length;
    }

    function downloadIndividualFiles(artifacts, options) {
        artifacts.forEach((artifact, index) => {
            setTimeout(() => {
                let filename = `${artifact.title}${getFileExtension(artifact)}`;
                if (options.addTimestamp) {
                    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                    const ext = getFileExtension(artifact);
                    filename = `${artifact.title}-${timestamp}${ext}`;
                }
                
                const blob = new Blob([artifact.content], { type: artifact.mimeType });
                downloadBlob(blob, filename);
            }, index * 1000);
        });
        
        if (options.includeConversation) {
            setTimeout(() => {
                const conversationText = extractConversationText();
                if (conversationText) {
                    let filename = 'conversation.md';
                    if (options.addTimestamp) {
                        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                        filename = `conversation-${timestamp}.md`;
                    }
                    const blob = new Blob([conversationText], { type: 'text/markdown' });
                    downloadBlob(blob, filename);
                }
            }, artifacts.length * 1000);
        }
        
        return artifacts.length;
    }

    async function downloadAllArtifacts(options = {}) {
        const artifacts = extractArtifacts();
        
        if (artifacts.length === 0) {
            throw new Error('Nenhum artefato encontrado nesta conversa');
        }
        
        if (options.zipFormat) {
            return await downloadAsZip(artifacts, options);
        } else {
            return downloadIndividualFiles(artifacts, options);
        }
    }

})();